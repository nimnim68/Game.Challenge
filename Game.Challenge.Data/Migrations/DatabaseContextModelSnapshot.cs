// <auto-generated />
using System;
using Game.Challenge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Game.Challenge.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Game.Challenge.Domain.Address.Address", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AddressId"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            AddressId = 1L,
                            City = "Berlin",
                            Country = "Germany",
                            Line1 = "Line 1 of Address Test",
                            Line2 = "Line 2 of Address Test",
                            Line3 = "Line 3 of Address Test",
                            UserId = 1L,
                            ZipCode = "10700"
                        });
                });

            modelBuilder.Entity("Game.Challenge.Domain.Game.Game", b =>
                {
                    b.Property<long>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GameId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1L,
                            Name = "Call of duty",
                            ThumbnailImage = "https://previews.123rf.com/images/aquir/aquir1311/aquir131100316/23569861-.jpg?fj=1"
                        },
                        new
                        {
                            GameId = 2L,
                            Name = "Need for speed",
                            ThumbnailImage = "https://previews.123rf.com/images/aquir/aquir1311/aquir131100316/23569861-.jpg?fj=1"
                        });
                });

            modelBuilder.Entity("Game.Challenge.Domain.Game.UserGame", b =>
                {
                    b.Property<long>("UserGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserGameId"), 1L, 1);

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<int>("GameState")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastPlayed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserGameId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGames");

                    b.HasData(
                        new
                        {
                            UserGameId = 1L,
                            GameId = 1L,
                            GameState = 1,
                            LastPlayed = new DateTime(2022, 2, 23, 22, 1, 48, 346, DateTimeKind.Local).AddTicks(9549),
                            RegisterDate = new DateTime(2022, 2, 16, 22, 1, 48, 346, DateTimeKind.Local).AddTicks(9622),
                            UserId = 1L
                        },
                        new
                        {
                            UserGameId = 2L,
                            GameId = 2L,
                            GameState = 1,
                            LastPlayed = new DateTime(2022, 2, 21, 22, 1, 48, 346, DateTimeKind.Local).AddTicks(9655),
                            RegisterDate = new DateTime(2022, 2, 13, 22, 1, 48, 346, DateTimeKind.Local).AddTicks(9660),
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("Game.Challenge.Domain.User.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            Email = "Test@gmail.com",
                            FirstName = "FirstName Test 1",
                            LastName = "LastName Test 1",
                            Username = "UserNameTest"
                        });
                });

            modelBuilder.Entity("Game.Challenge.Domain.Address.Address", b =>
                {
                    b.HasOne("Game.Challenge.Domain.User.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("Game.Challenge.Domain.Address.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Game.Challenge.Domain.Game.UserGame", b =>
                {
                    b.HasOne("Game.Challenge.Domain.Game.Game", "Game")
                        .WithMany("UserGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Challenge.Domain.User.User", "User")
                        .WithMany("UserGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Game.Challenge.Domain.Game.Game", b =>
                {
                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("Game.Challenge.Domain.User.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("UserGames");
                });
#pragma warning restore 612, 618
        }
    }
}
